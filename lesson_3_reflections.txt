When would you want to use a remote repository rather than keeping all your work local ?
- While collaborating with people so that there is a common branch where other developers can start fiddling with the code into other branches.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository ?
- We should always pull changes manually rather than having Git auto-update the local repository to avoid confusion since the remote will be updated continuosly and if you are working on a feature in a file it might get auto-updated which can lead to confusion.

Describe the differences between forks, clones, and branches. When would you use one instead of another ?
- A fork is when we want to work on someone else's repository without disturbing their work. A fork is a clone of their repository on the Github servers so that you can make changes without troubling their work.
A clone is the copy of the entire repository, it can be cloned from  a remote(Github) repository to a local, or from one local position to another.
A branch is a type of label of a single repository in order to create different paths where you can work on different features without having conflict with the main/production repository.

What is the benefit of having a copy of the last known state of the remote stored locally?
- The benefit is that you can stay up to date with the changes that have been made in the remote since you last synced up.

How would you collaborate without using Git or Github ? What would be easier, and what would be harder ?
- By being in constant touch with the other collaborators and knowing in advance what part of code they will be doing/re-doing. By making tarballs and sending them via mails to other collaborators and getting tarballs from them. If its a trivial piece of code and everyone knows clearly what they have to do it will be easier to collaborate without Github, but as the complexity grows and the collabortion deepens, using Github becomes more and more necessary and easier.

When would you want to make changes in a separate branch rather than directly in master ? What benefit does each approach have ?
- When testing or working on some experimental features you wouldn't want the production branch(master) to break every now and then, that's why oen would want to make changes in a separate branch to test the new features out. But if the changes you are working on are small and you are sure that it won't break the master branch we can directly make changes to the master. The benefit of directly making changes to master is that there is no hassle of creating a branch, puliing to get the current version then merging with the local branch and then pushing it again. The benefit of making changes in a seperate branch is that your working production branch is left untouched while you work on a new feature.